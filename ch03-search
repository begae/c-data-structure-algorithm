#include <stdio.h>
#include <stdlib.h>

int* create_int_arr(int n) {
    printf("Creates an array of %d integers...\n", n);
    int* arr = calloc(n, sizeof(int));
    for (int i = 0; i < n; i++) {
        printf("arr[%d] : ", i);
        scanf("%d", arr + i);
    }
    return arr;
}

long* create_long_arr(int n) {
    printf("Creates an array of %d long integers...\n", n);
    long* arr = calloc(n, sizeof(long));
    for (int i = 0; i < n; i++) {
        printf("arr[%d] : ", i);
        scanf("%ld", arr + i);
    }
    return arr;
}

int search(int* arr, int n, int target) {
    int i;
    *(arr + n) = target;
    for (i = 0; i < n; i++) {
        if (*(arr + i) == target)
            break;
    }
    return i == n ? -1 : i;
}

int search_index(int* arr, int n, int target, int* result) {
    int j = 0;
    for (int i = 0; i < n; i++) {
        if (*(arr + i) == target)
            *(result + j++) = i;
    }
    return j;
}

int bin_search_advanced(int* arr, int n, int target) {
    int start = 0;
    int end = n - 1;
    int found = -1;
    while (start != end) {
        int middle = (start + end) / 2;
        if (*(arr + middle) > target)
            end = middle - 1;
        else if (*(arr + middle) < target)
            start = middle + 1;
        else {
            found = middle;
            end = middle;
        }
    }
    return found;
}

int compare_long(const void* a, const void* b) {
    if (*(long*)a < *(long*)b)
        return 1;
    else if (*(long*)a > * (long*)b)
        return -1;
    else
        return 0;
}

void* seq_search(const void* target, const void* arr, size_t len, size_t typesize, int (*cmpfn) (const void*, const void*)) {
    for (int i = 1; i < len; i++) {
        char* next = (char*) arr + i * typesize;
        if (cmpfn(target, next) == 0)
            return (long*) next;
    }
    return NULL;
}

void* bin_search_generic(const void* target, const void* arr, size_t len, size_t typesize, int (*cmpfn) (const void*, const void*)) {
    int start = 0;
    int end = len - 1;
    int middle = (start + end) / 2;
    char* next = (char*) arr + middle * typesize;
    int compare = cmpfn(target, next);
    while (start != end) {
        if (compare == 0)
            return (long*) next;
        else if (compare > 0)
            end = middle;
        else
            start = middle;
        middle = (start + end) / 2;
        next = (char*) arr + middle * typesize;
        compare = cmpfn(target, next);
    }
    return NULL;
}

void* bin_search_generic_advanced(const void* target, const void* arr, size_t len, size_t typesize, int (*cmpfn) (const void*, const void*)) {
    int start = 0;
    int end = len - 1;
    int middle = (start + end) / 2;
    char* next = (char*) arr + middle * typesize;
    long* found = NULL;
    int compare = cmpfn(target, next);
    while (start != end) {
        if (compare == 0) {
            found = (long*) next;
            end = middle;
        }
        else if (compare > 0)
            end = middle;
        else
            start = middle;
        middle = (start + end) / 2;
        next = (char*) arr + middle * typesize;
        compare = cmpfn(target, next);
    }
    return found;
}


int main(void) {

    // linear search, sentinel
    int target, n, index;
    printf("Enter array size: ");
    scanf("%d", &n);
    int* int_arr = create_int_arr(n);
    printf("Looking for: ");
    scanf("%d", &target);
    index = search(int_arr, n, target);
    if (index == -1)
        puts("Couldn't find.\n");
    else
        printf("%d is at arr[%d].\n", target, index);
    free(int_arr);

    // linear search, multiple match, return indexes
    printf("Enter array size: ");
    scanf("%d", &n);
    int_arr = create_int_arr(n);
    printf("Looking for multiple: ");
    scanf("%d", &target);
    int* result = calloc(n, sizeof(int));
    int found = search_index(int_arr, n, target, result);
    printf("Found %d at index ", target);
    for (int i = 0; i < found; i++)
        printf("%d ", *(result + i));
    free(int_arr);
    free(result);

    // binary search, multiple match, return first index
    printf("\nEnter sorted(ascending) array size: ");
    scanf("%d", &n);
    int_arr = create_int_arr(n);
    printf("Looking for the first: ");
    scanf("%d", &target);
    index = bin_search_advanced(int_arr, n, target);
    printf("The first %d is at index %d.\n", target, index);
    free(int_arr);


    // bsearch, descending ordered array
    long long_target;
    long* long_index;
    printf("Enter sorted(descending) array size: ");
    scanf("%d", &n);
    long* long_arr = create_long_arr(n);
    printf("Looking for: ");
    scanf("%ld", &long_target);
    long_index = bsearch(&long_target, long_arr, n, sizeof(long), compare_long);
    if (long_index == NULL)
        puts("Couldn't find.\n");
    else
        printf("Long integer %ld is at index %d.\n", long_target, (int)(long_index - long_arr));
    free(long_arr);

    // generic linear search
    printf("Enter unsorted array size: ");
    scanf("%d", &n);
    long_arr = create_long_arr(n);
    printf("Looking for: ");
    scanf("%ld", &long_target);
    long_index = seq_search(&long_target, long_arr, n, sizeof(long), compare_long);
    if (long_index == NULL)
        puts("Couldn't find.\n");
    else
        printf("Long integer %ld is at index %d.\n", long_target, (int)(long_index - long_arr));
    free(long_arr);

    // generic binary search
    printf("Enter sorted(ascending) array size: ");
    scanf("%d", &n);
    long_arr = create_long_arr(n);
    printf("Looking for: ");
    scanf("%ld", &long_target);
    long_index = bin_search_generic(&long_target, long_arr, n, sizeof(long), compare_long);
    if (long_index == NULL)
        puts("Couldn't find.\n");
    else
        printf("Long integer %ld is at index %d.\n", long_target, (int)(long_index - long_arr));
    free(long_arr);

    // generic binary search, multiple match, return first index
    printf("Enter sorted(ascending) array size: ");
    scanf("%d", &n);
    long_arr = create_long_arr(n);
    printf("Looking for the first: ");
    scanf("%ld", &long_target);
    long_index = bin_search_generic_advanced(&long_target, long_arr, n, sizeof(long), compare_long);
    if (long_index == NULL)
        puts("Couldn't find.\n");
    else
        printf("The first %ld is at index %d.\n", long_target, (int)(long_index - long_arr));
    free(long_arr);

    return 0;
}
